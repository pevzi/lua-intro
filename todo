http://lua.space/general/blog-opening-and-contribution-guide
http://lua.space/webdev/the-best-lua-web-frameworks

Lua интересен тем, что это действительно маленький и простой язык. Это становится особенно заметно, когда в языке не находишь очередную возможность, которая в других языках стала уже совсем привычной. Однако, несмотря на это, язык не ощущается неполноценным, его можно назвать гибким, выразительным и практичным. К тому же, благодаря минималистичности языка, его официальную реализацию удалось сделать относительно простой, легковесной и быстрой, а также портировать на множество платформ. Более того, существует неофициальная реализация LuaJIT, которая отстаёт от официальной на пару версий, но зато имеет JIT-компилятор для компиляции Lua-кода в машинный код прямо во время исполнения программы. Это позволяет добиться высокой скорости исполнения, которую редко встретишь при использовании динамически типизируемых языков. (привести бенчмарки?)

Lua чаще всего используется для встраивания в другие приложения, в особенности - игры. (для расширения, автоматизации, конфигурационных файлов) (привести примеры) (+ про openresty) (+ про love)

Часть 0:
  - зачем луа вообще
  - для кого статья, почему именно такой формат
  - в чём писать, как запускать
  - про консоль тоже

Часть 1:
- чуть точнее описать, почему and/or так работают
  - http://www.troubleshooters.com/codecorn/lua/luaif.htm
  - второе выражение не вычисляется, если значение понятно по первому аргументу
  - возвращается последнее вычисленное (которое определило итоговое значение)
- сказать про строки, что луа о кодировках не знает, строка - тупо последовательность байт

Часть 2:
- если в качестве ключа хочется заюзать зарезервированное языком слово (типа return), то нужно писать его ["так"]
- сказать, что содержимое таблицы так просто принтом вывести нельзя

Часть 3:
- в луа 5.1 break тоже только в конце
- может таки убрать использование двоеточий?

Другое:
- generic for
- модули
- стандартная библиотека
  - стандартные функции
    - в т.ч. pcall (?)
  - math
  - table
  - string
  - utf8
  - корутины (?)
  - упомянуть и другие
- метатаблицы
- всякая мелочь/советы
  - точки с запятой
  - именование переменных
    - осмысленное
    - при использовании love лучше camelCase
  - желательно чтоб было как можно меньше магических констант
    - но если из кода понятно что это за число, то нафиг
  - желательно много мусора не создавать
    - в том числе юзать table.concat вместо кучи ..
  - userdata
  - FFI (?)
  - IDE, дебаггер, дополнение, линтеры (?)
- профилирование (?)
  - или оставить его на статью про библиотеки LOVE

Примеры:
- факториал (рекурсия)
- фибоначчи (рекурсия + мемоизация)
- adder (замыкание)
- вектор (для __add и методов)
- треугольник серпинского из треугольника паскаля

Что ещё не забыть:
- оглавление в начале каждой статьи
  - и ссылки на следующую/предыдущую части в конце статьи
- http://lua-users.org/wiki/LuaDirectory
  - http://lua-users.org/wiki/LuaCoroutinesVersusPythonGenerators
- про таблицы
  - можно вызвать next на таблицу, чтобы проверить, есть ли в ней хоть один элемент (включая массивную и хеш части)
  - подобие with (если менять _G)
  - метатаблицы (fallback, перегрузка операторов, наследование, мемоизация, слабые ключи/значения, мт на строках, мт на _G, упомянуть сложение и числа, __index может быть как функцией так и таблицей)
- корутины
  - http://www.lua.org/pil/9.4.html
  - подходы типа coil, convoke, hump.timer
- точки с запятой не нужны
  - кроме случая, когда строка начинается с выражения в скобках
- дать ссылку на http://notebook.kulchenko.com/programming/lua-good-different-bad-and-ugly-parts
  - и ссылки на инфу, которые там приводятся
  - http://www.lua.org/doc/jucs05.pdf
  - http://www.lua.org/gems/sample.pdf
  - http://www.luafaq.org/
  - http://www.luafaq.org/gotchas.html

?:
? (стандартные либы юзают raw, а не интерфейс который мы запилили)
? (обращение к элементам метатаблицы тоже raw, т.е. не учитывается метатаблица у этой метатаблицы)
? (не вызывается tostring для таблиц при конкатенации)
