http://lua.space/general/blog-opening-and-contribution-guide
http://lua.space/webdev/the-best-lua-web-frameworks

Lua интересен тем, что это действительно маленький и простой язык. Это становится особенно заметно, когда в языке не находишь очередную возможность, которая в других языках стала уже совсем привычной. Однако, несмотря на это, язык не ощущается неполноценным, его можно назвать гибким, выразительным и практичным. К тому же, благодаря минималистичности языка, его официальную реализацию удалось сделать относительно простой, легковесной и быстрой, а также портировать на множество платформ. Более того, существует неофициальная реализация LuaJIT, которая отстаёт от официальной на пару версий, но зато имеет JIT-компилятор для компиляции Lua-кода в машинный код прямо во время исполнения программы. Это позволяет добиться высокой скорости исполнения, которую редко встретишь при использовании динамически типизируемых языков. (привести бенчмарки?)

Lua чаще всего используется для встраивания в другие приложения, в особенности - игры. (для расширения, автоматизации, конфигурационных файлов) (привести примеры) (+ про openresty) (+ про love)

+ оглавление в начале каждой статьи и ссылки на следующую/предыдущую части в конце статьи

Часть 0:
- зачем луа вообще, чем он крут
  - всё ради минималистичности, согласованности, простоты реализации
  - если фичи нет, это не значит что лень реализовывать, просто она избыточна
  - в то же время куча гибких механизмов
- для кого статья, почему именно такой формат
- в чём писать, как запускать
- про консоль тоже

Часть 1:
- не очень понятна формулировка - "строки хранятся в памяти в одном экземпляре" (?)
- userdata (?)

Часть 2:
- сказать, что содержимое таблицы так просто принтом вывести нельзя (?)

Часть 3:
- в луа 5.1 break тоже только в конце
- сказать про то что continue тоже слишком редко нужен, и goto - более общее решение
  - break по идее тоже теперь redundant и даже реализован внутри как частный случай goto, но он наверное слишком часто нужен, чтобы убирать его из языка
- добавить побольше разных элементов в оба примера, чтоб явно была видна разница pairs и ipairs
- что такое итерация

Часть 4:
- упомянуть, что глобальные переменные могут храниться не только в _G
  - или вообще убрать отсюда про _G и переместить в статью где про окружения

Часть 5:
- функции тоже по ссылке передаются
  - 5.2: Equality between function values has changed. Now, a function definition may not create a new value; it may reuse some previous value if there is no observable difference to the new function.
- чанк тоже может принимать аргументы через многоточие
  - передать можно например создав функцию с помощью load/loadfile

Другое:
- часть 6: модули
  - как работает require
  - где ищутся модули
  - создаём таблицу и возвращаем её из модуля
  - избегаем глобальных переменных
  - как работают загрузчики
    - в луа 5.3 немного по-другому
  - модули желательно ещё распределить по разным каталогам
- часть 7: другие возможности языка
  - окружения функций
  - generic for
  - корутины
    - http://www.lua.org/pil/9.4.html
    - подходы типа coil, convoke, hump.timer
    - http://lua-users.org/wiki/LuaCoroutinesVersusPythonGenerators
  - метатаблицы
    - fallback
    - __index может быть как функцией так и таблицей
    - перегрузка операторов
    - наследование
    - мемоизация
    - слабые ключи/значения
    - мт на строках
    - мт на _G
      - http://metalua.luaforge.net/src/lib/strict.lua.html / http://lua-users.org/wiki/DetectingUndefinedVariables
    - упомянуть __add и числа (?)
- часть 8: стандартная библиотека
  - стандартные функции
    - можно вызвать next на таблицу, чтобы проверить, есть ли в ней хоть один элемент (включая массивную и хеш части)
  - рассказать про некоторые важные библиотеки + упомянуть что ещё есть
  - может быть найти полностью переведённый референс и дать ссылку
- часть 9: всякая мелочь/советы ("куда теперь") (?)
  - точки с запятой не нужны, кроме случая, когда строка начинается с выражения в скобках
  - именование переменных
    - осмысленное
    - при использовании love лучше camelCase
  - желательно чтоб было как можно меньше магических констант
    - но если из кода понятно что это за число, то нафиг
  - желательно много мусора не создавать
    - в том числе юзать table.concat вместо кучи ..
  - FFI (?)
  - IDE, дебаггер, дополнение, линтеры (?)
  - переопределять стандартные функции (?)
  - создание локальных функций, указывающих на love.graphics и прочее такое
  - ссылки на другую полезную инфу
    - http://lua-users.org/wiki/LuaDirectory
    - http://notebook.kulchenko.com/programming/lua-good-different-bad-and-ugly-parts
    - http://www.lua.org/doc/jucs05.pdf
    - http://www.lua.org/gems/sample.pdf
    - http://www.luafaq.org/
    - http://www.luafaq.org/gotchas.html
  - профилирование (?)
    - или оставить его на статью про библиотеки LOVE

Примеры:
- фибоначчи (мемоизация)
- вектор (для __add и методов)

?:
? (стандартные либы юзают raw, а не интерфейс который мы запилили)
? (обращение к элементам метатаблицы тоже raw, т.е. не учитывается метатаблица у этой метатаблицы)
? (не вызывается tostring для таблиц при конкатенации)
